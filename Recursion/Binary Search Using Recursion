Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. 
If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

https://leetcode.com/problems/binary-search/

class Solution {
  public static void main(String args[])throws IOException
    {
       InputStreamReader isr=new InputStreamReader(System.in);
       BufferedReader br=new BufferedReader(isr);
       int nums[]=new int[10];
       Solution s=new Solution();
       System.out.println("Enter the elements");
        for(int i=0;i<nums.length;i++)
        {
            nums[i]=Integer.parseInt(br.readLine());
        }
        System.out.println("Enter the target");
        int target=Integer.parseInt(br.readLine());
        int ans=s.search(nums,target);
        System.out.println(" "+nums+"exist in nums  and its index is"+ans);
        
        
    }
    public int search(int[] nums, int target) {
        return BinarySearch( nums,target,0,0,nums.length-1);
}
     public static int BinarySearch(int[] nums, int target,int idx,int start,int end) {
     if( start > end){
            return -1;
        }
    int mid=start+(end-start)/2;
    if(nums[mid] == target) 
        return mid;
    else
        if(target<nums[mid])
        {
            return BinarySearch(nums,target,idx,start,mid-1);
        }
           return BinarySearch(nums,target,idx,mid+1,end);
   
        
  }
}

